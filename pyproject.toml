[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-ai-optimization"
dynamic = ["version"]
description = "Optimized Claude AI agent configuration and workflow automation"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Vlada AI Team", email = "ai@vlada.dev" },
]
keywords = [
    "ai",
    "claude",
    "agents",
    "optimization",
    "workflow",
    "automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
    "pyyaml>=6.0",
    "click>=8.0",
    "rich>=13.0",
    "typer>=0.9.0",
    "httpx>=0.24.0",
    "asyncio-mqtt>=0.11.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.12",
    "flake8>=6.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
docs = [
    "mkdocs>=1.4",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.20",
]
monitoring = [
    "prometheus-client>=0.16",
    "grafana-api>=1.0",
    "elasticsearch>=8.0",
]

[project.urls]
Documentation = "https://github.com/vlada-ai/claude-ai-optimization#readme"
Issues = "https://github.com/vlada-ai/claude-ai-optimization/issues"
Source = "https://github.com/vlada-ai/claude-ai-optimization"

[project.scripts]
claude-optimize = "claude_ai_optimization.cli:main"
agent-validate = "claude_ai_optimization.validation:validate_agents"
config-generate = "claude_ai_optimization.config:generate_config"

[tool.hatch.version]
path = "src/claude_ai_optimization/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/docs",
    "/configs",
    "/templates",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
pythonpath = [
    "src",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]