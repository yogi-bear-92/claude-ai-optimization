name: Security Scanning & Compliance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - dependencies
        - containers
        - secrets
        - sast

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          pip install bandit safety semgrep
          
      - name: Run Bandit security linter
        run: |
          bandit -r . -f json -o bandit-results.json || true
          bandit -r . -f txt -o bandit-results.txt || true

      - name: Run Semgrep SAST scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/owasp-top-ten
            p/django
            p/flask
          generateSarif: "1"

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sast-results
          path: |
            bandit-results.*
            semgrep.sarif
          retention-days: 30

  # Dependency Security Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-results.json || true
          safety check --output safety-results.txt || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-results.json || true
          pip-audit --format=cyclonedx-json --output=sbom.json || true

      - name: Run Snyk dependency scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'azure-automation'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidHours 24
            --exclude "**/tests/**"
            --exclude "**/test_*"

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-results.*
            pip-audit-results.json
            snyk-results.json
            sbom.json
            reports/

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan]
    if: github.event_name != 'pull_request' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == 'full'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        run: |
          docker build -t azure-automation:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'azure-automation:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: "azure-automation:scan"
          fail-build: false
          severity-cutoff: medium
          output-format: sarif

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: results.sarif

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: azure-automation:scan
          format: spdx-json
          output-file: container-sbom.spdx.json

      - name: Upload container scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            trivy-fs-results.json
            results.sarif
            container-sbom.spdx.json

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog secrets scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --force-use-all-plugins > secrets-baseline.json
          detect-secrets audit secrets-baseline.json --report --fail-on-unaudited

      - name: Upload secret scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secret-scan-results
          path: |
            secrets-baseline.json

  # Infrastructure Security Scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Checkov IaC scanner
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'docker'
          iac_version: 'v1'
          policy_type: 'security'
          only_warn: true
          sarif_upload: true

  # License Compliance Scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pip-licenses licensecheck

      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=html --output-file=licenses.html
          pip-licenses --format=csv --output-file=licenses.csv

      - name: Check license compatibility
        run: |
          pip-licenses --allow-only="MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;Apache Software License;BSD License" || true

      - name: Run FOSSA license scan
        uses: fossa-contrib/fossa-action@v2
        if: ${{ secrets.FOSSA_API_KEY }}
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true

      - name: Upload license scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: license-scan-results
          path: |
            licenses.*

  # Security Policy Validation
  policy-validation:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate SECURITY.md exists
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "❌ SECURITY.md file not found"
            exit 1
          fi
          echo "✅ SECURITY.md found"

      - name: Check for security contact
        run: |
          if ! grep -q "security@" SECURITY.md; then
            echo "⚠️ No security contact found in SECURITY.md"
          fi

      - name: Validate GitHub security policy
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data: securityAdvisories } = await github.rest.securityAdvisories.listRepositoryAdvisories({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log(`Found ${securityAdvisories.length} security advisories`);
            } catch (error) {
              console.log('Security advisories API not available');
            }

  # Compliance Reporting
  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, container-scan, secret-scan, license-scan]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v3
        with:
          path: scan-results

      - name: Install report generation tools
        run: |
          pip install jinja2 markdown pdfkit weasyprint

      - name: Generate compliance report
        run: |
          python scripts/generate_compliance_report.py \
            --scan-results scan-results \
            --output compliance-report.html \
            --format html

      - name: Generate security dashboard
        run: |
          python scripts/generate_security_dashboard.py \
            --scan-results scan-results \
            --output security-dashboard.json

      - name: Upload compliance reports
        uses: actions/upload-artifact@v3
        with:
          name: compliance-reports
          path: |
            compliance-report.html
            security-dashboard.json

      - name: Create security summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read security dashboard data
            let dashboardData = {};
            try {
              dashboardData = JSON.parse(fs.readFileSync('security-dashboard.json', 'utf8'));
            } catch (e) {
              console.log('Could not read security dashboard data');
            }
            
            const summary = `
            ## 🔒 Security Scan Summary
            
            **Scan Date:** ${new Date().toISOString().split('T')[0]}
            
            ### Results Overview
            - **SAST Scan:** ${dashboardData.sast?.status || 'Unknown'}
            - **Dependency Scan:** ${dashboardData.dependencies?.status || 'Unknown'}  
            - **Container Scan:** ${dashboardData.containers?.status || 'Unknown'}
            - **Secret Scan:** ${dashboardData.secrets?.status || 'Unknown'}
            
            ### Key Findings
            ${dashboardData.summary?.findings?.map(f => `- ${f}`).join('\n') || 'No critical findings'}
            
            ### Recommendations
            ${dashboardData.summary?.recommendations?.map(r => `- ${r}`).join('\n') || 'Continue monitoring'}
            
            📊 **Full Report:** Available in workflow artifacts
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number || 1,
              body: summary
            });

  # Security notifications
  security-notifications:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [compliance-report]
    if: failure() || (success() && github.event_name == 'schedule')
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🔒 **Security Scan Results**
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            **Status:** ${{ job.status == 'success' && '✅ All scans passed' || '⚠️ Security issues detected' }}
            
            🔗 **View Results:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ${{ job.status != 'success' && '🚨 **Action Required:** Review security findings and address critical issues.' || '' }}
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}

      - name: Create security issue for failures
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `🚨 Security scan failures - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Failures Detected
            
            **Workflow:** ${{ github.workflow }}
            **Run ID:** ${{ github.run_id }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            ### Failed Jobs
            One or more security scans have failed. Please review the workflow results and address any critical security issues.
            
            ### Action Required
            - [ ] Review workflow logs for specific failures
            - [ ] Address critical and high-severity findings
            - [ ] Update dependencies if vulnerabilities found
            - [ ] Re-run security scans after fixes
            
            ### Links
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Security Tab](${{ github.server_url }}/${{ github.repository }}/security)
            
            **Auto-generated by security scanning workflow**
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'high-priority', 'automated']
            });