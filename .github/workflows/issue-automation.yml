name: GitHub Issue Automation

on:
  issues:
    types: [opened, labeled, assigned]
  issue_comment:
    types: [created]

jobs:
  analyze-issue:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'labeled'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Analyze issue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        python agents/issue-executor.py analyze \
          --issue-number ${{ github.event.issue.number }} \
          --repository ${{ github.repository }}
    
    - name: Add analysis comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read analysis results
          let analysisResults = {};
          try {
            analysisResults = JSON.parse(fs.readFileSync('/tmp/issue-analysis.json', 'utf8'));
          } catch (e) {
            console.log('No analysis results found');
            return;
          }
          
          const comment = `## 🤖 Automated Analysis Complete
          
          **Issue Type:** ${analysisResults.issue_type}
          **Priority:** ${analysisResults.priority}
          **Complexity:** ${analysisResults.complexity_score}/1.0
          **Primary Agent:** ${analysisResults.primary_agent}
          **Automation Confidence:** ${Math.round(analysisResults.confidence * 100)}%
          
          **Execution Plan:**
          ${analysisResults.execution_steps.map(step => `- ${step}`).join('\n')}
          
          **Estimated Cost:** $${analysisResults.estimated_cost}
          **Estimated Duration:** ${analysisResults.estimated_duration}
          
          ${analysisResults.auto_execute ? '✅ **Auto-execution approved**' : '⚠️ **Manual review required**'}
          `;
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });

  auto-execute:
    runs-on: ubuntu-latest
    needs: analyze-issue
    if: contains(github.event.issue.labels.*.name, '🤖 ai-executing')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Execute issue resolution
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        python agents/issue-executor.py execute \
          --issue-number ${{ github.event.issue.number }} \
          --repository ${{ github.repository }} \
          --create-pr
    
    - name: Add execution results comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read execution results
          let results = {};
          try {
            results = JSON.parse(fs.readFileSync('/tmp/execution-results.json', 'utf8'));
          } catch (e) {
            console.log('No execution results found');
            return;
          }
          
          const comment = `## ${results.success ? '✅' : '❌'} Automated Execution ${results.success ? 'Complete' : 'Failed'}
          
          **Branch:** ${results.branch_name || 'N/A'}
          **Pull Request:** ${results.pr_number ? `#${results.pr_number}` : 'N/A'}
          **Execution Time:** ${results.execution_time}
          **Quality Gates:** ${results.quality_status}
          **Cost:** $${results.actual_cost}
          
          ${results.validation_checklist ? '**Validation Required:**\n' + results.validation_checklist.map(item => `- [ ] ${item}`).join('\n') : ''}
          
          ${results.error_message ? `**Error:** ${results.error_message}` : ''}
          `;
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });